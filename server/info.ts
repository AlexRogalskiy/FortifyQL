export const info = {
    "Boolean Based SQL Injection": "A technique where attackers manipulate an application by sending SQL queries that produce true or false outcomes.By observing the application's behavior to these binary results, they can deduce valuable information about the underlying database.",
    "BBSQLI Solution": "Utilize parameterized queries or prepared statements to ensure data is securely handled. By doing this, you ensure that user input is always treated as data and not executable code. Regularly review and update your database permissions to limit unnecessary access.",
    "Error Based SQL Injection": "Attackers intentionally send erroneous SQL queries to provoke the application into revealing database error messages. These messages can inadvertently expose details about the database structure or other sensitive information.",
    "EBSQLI Solution": "Turn off detailed error messages for your production environments and use custom error handling to ensure system-specific details are never exposed to the user. Always use parameterized queries to separate user input from SQL logic.",
    "Time-Based Blind SQL Injection": "In this subtle attack, perpetrators submit specific SQL queries and then measure the response time of the application. Extended delays can hint at the validity of the attacker's query, allowing them to piece together database insights over time.",
    "TMSQLI Solution": "Along with using parameterized queries, implement input validation using a strict whitelist. Monitor and alert on unusual patterns in database response times which could indicate exploitation attempts.",
    "Multiple Identical Batching Attack": "By repeatedly sending the same or similar queries in bulk, attackers aim to either uncover vulnerabilities in the application's handling of batched requests or create disruptions in its operations.",
    "MIBA Solution": "Implement rate-limiting to detect and block repeated identical queries from a single source. Utilize web application firewalls (WAFs) to monitor and filter out suspicious patterns in incoming traffic.",
    "Resource Exhaustive and Nested Batching Attack": "Attackers craft intricate and nested SQL queries, then send them in large batches. The goal is to overburden the database or application resources, potentially leading to failures or unintentional exposure of information.",
    "REANBA Solution": "Analyze and set limits on query depth and complexity. Ensure that your systems can detect nested query patterns and either reject or rate-limit them. Again, WAFs can be useful in filtering out such complex, resource-intensive requests.",
    "Verbose Errors": "Errors that provide detailed diagnostic information, often useful for debugging but can reveal system internals, configurations, or other sensitive data when displayed to end users. Attackers can exploit such verbose messages to gain insights into potential vulnerabilities within the system.",
    "VE Solution": "Use generic error messages in your production environments. Detailed errors can be logged internally for debugging purposes but should never be displayed to end-users. This prevents attackers from gaining insights from the error outputs.",
    "Circular DoS Queries": "Attackers send specially crafted SQL queries that create infinite loops or recursive operations in the database. Such queries can consume extensive server resources, leading to denial of service as the database gets overwhelmed and can't handle other requests.",
    "CDQ Solution": "Set reasonable timeouts for database queries. Implement monitoring tools that can detect unusual spikes in resource consumption or endless loop patterns, alerting administrators to potential attacks.",
    "INJ-URI": "https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#injection-prevention",
    "VE-URI": "https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#dont-return-excessive-errors",
    "BATCH-URI": "https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#mitigating-batching-attacks",
    "DoS-URI": "https://cheatsheetseries.owasp.org/cheatsheets/GraphQL_Cheat_Sheet.html#dos-prevention"
}